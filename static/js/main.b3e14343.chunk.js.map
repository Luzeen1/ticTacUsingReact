{"version":3,"sources":["logo.svg","Board.js","Scores.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","i","onbtnClickedHandler","cell","value","key","onClick","e","className","id","round","p1","p2","winningOptions","App","props","addDraw","state","setState","msj","displayFinalResult","xPoints","oPoints","checkResult","currentPlayer","gameBoard","currentXresult","currentOresult","isThereWinner","length","winOption","firstCellInOption","secondCellInOption","thirdCellInOption","restartClickable","gameIsActive","addwinner","includes","changePossible","swapPlayer","setOnBoard","symbole","movesNumber","table","btnClickedHandler","bind","resetHandler","this","tmpRound","xPoint","oPoint","border","map","row","Scores","Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3e14343.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\n\r\nexport default ({ i, onbtnClickedHandler,cell }) => {\r\n        let value = '?';\r\n        if (!!cell) {\r\n                value = cell;\r\n        }\r\n        return (<li key={i} onClick={(e) => onbtnClickedHandler(i)} className=\"tic\" id={i}>{value}</li>)\r\n       \r\n};\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport default ({i,round,p1,p2})=>{\r\n  return(\r\n        <tr key={i}>\r\n           <td>{round}</td>\r\n           <td>{p1}</td>\r\n           <td>{p2}</td>\r\n        </tr>\r\n    \r\n  )\r\n};\r\n\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from \"./Board\";\nimport Scores from \"./Scores\";\n\n\n\n\nvar winningOptions = [\n  //horizontal\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  //vertical\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  //diagonal\n  [0, 4, 8],\n  [2, 4, 6]\n];\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movesNumber: 0,\n      currentPlayer: 'X',\n      xPoints: 0,\n      oPoints: 0,\n      gameIsActive: true,\n      changePossible: true,\n      restartClickable: false,\n      round: 1,\n      gameBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      msj: 'Playing . . .',\n      table: [1, 2, 3, 4, 5],\n      currentXresult: [0,0,0,0,0],\n      currentOresult: [0,0,0,0,0]\n    };\n\n    this.btnClickedHandler = this.btnClickedHandler.bind(this);\n    this.resetHandler = this.resetHandler.bind(this);\n    this.addwinner = this.addwinner.bind(this);\n\n  }\n\n\n  addwinner() {\n    const { currentPlayer, round} = this.state;\n    this.setState({ msj: 'The Winner In Round # ' + this.state.round + '  is Player  ' + currentPlayer });\n    if (round == 5) {\n      this.displayFinalResult();\n    }\n  }\n\n  addDraw = () => {\n    const { round } = this.state;\n    this.setState({ msj: 'It Is a Draw' });\n    if (round == 5) {\n      this.displayFinalResult();\n    }\n  }\n  displayFinalResult = () => {\n    const{xPoints,oPoints} = this.state;\n    if (xPoints > oPoints) {\n      this.setState({ msj: 'Congrats X - Good Job ! !' })\n    }\n    else if (oPoints > xPoints) {\n      this.setState({ msj: 'Congrats O - Good Job ! !' })\n    }\n    else {\n      this.setState({ msj: 'It is a DRAW . . Try Again : )' })\n    }\n  }\n\n  btnClickedHandler(i) {\n    const { currentPlayer, movesNumber } = this.state;\n    if (this.state.gameBoard[i] !== \"\" || !this.state.gameIsActive)\n      return;\n    this.setOnBoard(currentPlayer, i);\n    this.setState({ movesNumber: movesNumber + 1 });\n    if (movesNumber > 3) {\n      this.checkResult();\n    }\n    this.swapPlayer();\n  }\n\n  resetHandler() {\n    //reset the board\n    const { round, xPoints, oPoints } = this.state;\n    let tmpRound = round, xPoint = xPoints, oPoint = oPoints;\n    if (tmpRound == 5) {\n      tmpRound = 1;\n      xPoint = 0;\n      oPoint = 0;\n      this.setState({currentXresult:[0,0,0,0,0], currentOresult:[0,0,0,0,0]})\n    }\n    else {\n      tmpRound++;\n    }\n    if (this.state.restartClickable) {\n      this.setState({\n        movesNumber: 0,\n        currentPlayer: 'X',\n        xPoints: xPoint,\n        oPoints: oPoint,\n        gameIsActive: true,\n        changePossible: true,\n        restartClickable: false,\n        round: tmpRound,\n        gameBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        msj: 'Playing . . .',\n        table: [1, 2, 3, 4, 5],\n      })\n    }\n  }\n\n  checkResult = () => {\n    const { xPoints, oPoints, currentPlayer, gameBoard,round,currentXresult,currentOresult } = this.state;\n    let isThereWinner = false;\n    for (let i = 0; i < winningOptions.length; i++) {\n      const winOption = winningOptions[i];\n      let firstCellInOption = gameBoard[winOption[0]];\n      let secondCellInOption = gameBoard[winOption[1]];\n      let thirdCellInOption = gameBoard[winOption[2]];\n      if (firstCellInOption === '' || secondCellInOption === '' || thirdCellInOption === '') {\n        continue;\n      }\n      if (firstCellInOption === secondCellInOption && secondCellInOption === thirdCellInOption) {\n        isThereWinner = true;\n        break\n      }\n    }//end for loop\n\n    if (isThereWinner) {\n      let i = round-1;\n      if (currentPlayer == 'X') {\n        currentXresult[i]=1;\n        this.setState({ xPoints: xPoints + 1 ,currentXresult })\n      } else {\n        currentOresult[i]=1;\n        this.setState({ oPoints: oPoints + 1  ,currentOresult})\n      }\n      this.setState({ restartClickable: true, gameIsActive: false })\n      this.addwinner();\n      return;\n    }\n    let isDraw = !gameBoard.includes(\"\");\n    if (isDraw) {\n      this.setState({ restartClickable: true, changePossible: false, gameIsActive: false });\n      this.addDraw();\n      return;\n    }\n  }\n\n  swapPlayer = () => {\n    const { currentPlayer } = this.state;\n    if (currentPlayer === 'X')\n      this.setState({ currentPlayer: 'O' });\n    else {\n      this.setState({ currentPlayer: 'X' });\n    }\n  }\n\n  setOnBoard = (symbole, i) => {\n    const { gameBoard } = this.state;\n    gameBoard[i] = symbole;\n    this.setState({ gameBoard });\n  }\n\n\n  render() {\n    const { currentPlayer, gameBoard, msj, round, table, currentXresult, currentOresult } = this.state;\n    return (\n      <div id=\"main\">\n        <div className=\"container\">\n          <div className=\"row d-flex\">\n            <div className=\"col-md-4 col-sm-12\">\n              <div>\n                <div id=\"turnsBoardUpdates\">\n                  <div>{msj}</div>\n                </div>\n                <div id=\"round\">Round #{round}</div>\n                <div id=\"firstPlayer\" className={`x ${currentPlayer === 'X' ? 'active' : ''}`}> Player X - 1</div>\n                <div id=\"secondPlayer\" className={`o ${currentPlayer === 'O' ? 'active' : ''}`}> Player O - 2</div>\n                <table id=\"scoreTable\" border=\"1\" className=\"table table-borderless\">\n                  <tbody>\n                    <tr>\n                      <th>#</th>\n                      <th id=\"score\">X Player</th>\n                      <th id=\"score\">O Player</th>\n                    </tr>\n                  </tbody>\n                  <tbody>\n                    {\n                      table.map((row, i) => {\n                        return (<Scores i={row} round={row} p1={currentXresult[i]} p2={currentOresult[i]}></Scores>)\n                      })\n                    }\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <div className=\"col-md-4 col-sm-12\">\n              <div className=\"container-fluid text-center\" id=\"box\">\n                <h1 id=\"h1\">Tic Tac Toe </h1>\n                <div id=\"message\"></div>\n                <ul id=\"gameBoard\" >\n                  {gameBoard.map((cell, i) => {\n                    return (<Board i={i} key={i} onbtnClickedHandler={this.btnClickedHandler} cell={cell} />)\n                  })}\n                </ul>\n                <footer>\n                  <h2 className=\"game--status\"></h2>\n                  <button id=\"reset\" className=\"game--restart\" onClick={this.resetHandler}>Play Again</button>\n                </footer>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}